#include "report.h"

#include <sstream>

#include "nlohmann/json.hpp"

using std::string;
using std::vector;
using json = nlohmann::json;


string ScoringReport::to_string(bool use_uniq) const {
    std::stringstream ss;
    ss << (data["title"].empty()? "Practice Image" : data["title"]);
    ss << " Scoring Report\n\n";

    ss << "Timestamp: " << data["time_recorded"].get<string>() << "\n"
        << "Start time: " << data["start_time"].get<string>() << "\n"
        << "Time Left: " << data["time_left"].get<string>() << "\n\n";

    ss << "Score: " << pts() << " / " << data["max_pts"].get<int>() << " pts\n";
    if (data["penalties"].size())
        ss << "  - Penalties: " << penal_pts() << " pts\n";
    if (data["vulns"].size())
        ss << "  - Vulnerabilities: " << vulns_pts() << " pts\n";
    ss << "\n";

    auto add_list = [&] (const json& ls) {
        for (const auto& itm : ls) {
            ss << "  - " << itm["name"].get<string>();
            if (use_uniq && itm["uniq"].get<string>().size())
                ss << " [" << itm["uniq"].get<string>() << "]";
            ss <<" (" << itm["pts"].get<int>() << " pts)\n";
        }
    };

    if (data["penalties"].size()) {
        ss << "Got " << data["penalties"].size() << " penalties\n";
        add_list(data["penalties"]);
        ss << '\n';
    }

    if (data["vulns"].size()) {
        ss << "Fixed " << data["vulns"].size() << " out of "
            << data["total_vulns"].get<int>() << " vulnerabilities\n";
        add_list(data["vulns"]);
        ss << '\n';
    }

    ss << "Generated by imsc. \n";
    return ss.str();
}

int ScoringReport::penal_pts() const {
    int pts = 0;
    for (const auto& itm : data["penalties"])
        pts += itm["pts"].get<int>();
    return pts;
}

int ScoringReport::vulns_pts() const {
    int pts = 0;
    for (const auto& itm : data["vulns"])
        pts += itm["pts"].get<int>();
    return pts;
}

// NOTE: prefers reporting loss than gain
bool ScoringReport::lost_since(const ScoringReport& last) const {
    // basic method
    return penal_pts() < last.penal_pts()
        || vulns_pts() < last.vulns_pts();
}

bool ScoringReport::gained_since(const ScoringReport& last) const {
    return penal_pts() >= last.penal_pts()
        && vulns_pts() >= last.vulns_pts();
}

void ScoringReport::add_item(const json& itm) {
    if (itm["pts"].get<int>() > 0) data["vulns"].push_back(itm);
    else if (itm["pts"].get<int>() < 0) data["penalties"].push_back(itm);
}
